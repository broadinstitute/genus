# neptune project for logging the simulation results
neptune_project: "dalessioluca/genus"

# simulation-level parameters
simulation:
  # can be scratch, resume, pretrained
  type: "scratch"
  BATCH_SIZE: 128
  MAX_EPOCHS: 601
  TEST_FREQUENCY: 5
  CHECKPOINT_FREQUENCY: 50
  gaussian_mixture: False
  bb_regression_always_active: True

# architecture parameters
architecture:

  # Ingeter parameters which determines how many max-pool are in the unet.
  # Every max-pool lead to a reduction in spatial extension by a factor of 2
  # Usually it is 3,4 or 5
  # The background is extracted at the bottom of the UNET.
  # Therefore this parameters controls the spatial resolution of z_bg
  unet_n_max_pool: 4

  # Integer. Latent dimension for the dimension and number of embeddings in the BACKGROUND dictionary
  zbg_dim: 32
  zbg_K: 100

  # Integer in the range 0 - unet_n_max_pool (included)
  # It determines the level in the unet at which the bounding boxes are extracted
  # The larger the number the closest to the bottom of the unet the bounding_boxes are extracted
  # Usually it is 1 or 2 less than unet_n_max_pool
  unet_level_boundingboxes: 3

  # Integer: the size of the glimpse,
  # scale_factor_encoder_decoder: factor of 2 describing the reduction from glimpse size to encoding region (4x4 for example)
  glimpse_size: 32
  scale_factor_encoder_decoder: 8

  # Integer. Latent dimension for the embeddings and the number of such embedding in the dictionary
  zinstance_dim: 32
  zinstance_K: 100

  # Integer. Latent dimension for the embeddings and the number of such embedding in the dictionary
  zwhere_dim: 32
  zwhere_K: 100

  # This parameter should be a power of 2.
  # At the momnet only 1 = pow(2,0) will work.
  # In future versions we will implement way to deal with very large images
  unet_spatial_downsampling_before_first_max_pool: 1

  # Integer. Number of channels before the first max-pool.
  # Later each max-pool will lead to spatial reduction by a factor of 2
  # and increase in channel number by 2
  unet_ch_before_first_max_pool: 16

  # The number of channels in the feature_map
  # The fature map will be cropped according to bounding boxes to generate z_instance
  unet_ch_feature_map: 16

  # Float values in (0,1) for the IntersectionOverMinimum threshold to be used in non-max-suppression.
  # Lower value lead to a more strict NMS.
  # Do not change them unless you understand what you are doing.
  nms_threshold_train : 0.3
  nms_threshold_test : 0.5

# parameters describing the input image
input_image:
  # Integer. Number of channels of the image
  ch_in: 1

  # Integer. Size, in pixels, of the patches to analyze.
  # This is useful if a large image is processed by random crops
  patch_size: 80

  # Integer. Maximum number of objects in each patch of square size patch_size x patch_size.
  # A too large value will lead to waste computations.
  # Small value will force the model to group distinct objects together.
  max_objects_per_patch: 8

  # Tuple with the range (in pixel) ofor the size of the objects
  range_object_size: [10, 35]

  # Desired value for pixel-averaged Mean Square Error, i.e. MSE = pixel_mean_of (x-x_reconstructed)**2
  # Small value lead to more accurate reconstruction.
  # If the value is too small, the model will ignore all the priors to try to achieve a low MSE.
  # The goal is to segment the scene into objects not to achieve perfect reconstruction.
  # Therefore use a not-to-small value.
  # For example, if the image intensity is the range (0,1) then use 0.1
  target_mse_max: 0.075

  # Tuple with the desired fraction of pixel to be assigned to the foreground objects.
  # The values are in the (0,1) range. If unsure, use vague values.
  # The values are used to guide the model toward the desired segmentation.
  target_fgfraction_min_max: [0.05, 0.15]

  # The following parameters determine the DPP-prior which in turns determine the expected number of object in the scene.
  # At the current moment these parameters are NOT learnable and need to be chosen differently for each dataset.
  # See our example notebook to see how to choose these parameters.
  # Note that this is just the prior, the inferred number of object in each scene will in general deviate from the prior.
  # In future releases, we will make these parameters learnable.
  DPP_learnable: False
  DPP_length: 5.0
  DPP_weight: 0.2
  # In the current release the following parameters are not used
  # DPP_length_min_max: [2.0, 50.0]
  # DPP_weight_min_max: [0.01, 100.0]
  # target_ncell_min_max: [2.0, 6.0]

# parameter related to the loss function
loss:
  # The loss functions has many terms whose importance is controlled by the 3 values below.
  # We use an automatic method to adjust these parameters but the user can specify the range of acceptable values.
  # Do not change them unless you understand what you are doing
  lambda_mse_min_max: [0.01, 100.0]
  lambda_ncell_min_max: [0.01, 100]
  lambda_fgfraction_min_max: [0.01, 100]

  # Hyper-parameters which control additional loss terms.
  # Do not change them unless you understand what you are doing
  mask_overlap_penalty_strength: 0.001
  bounding_box_regression_penalty_strength: 0.001
  bounding_box_regression_padding: 3

  # Integer. Number of monte-carlo samples used to estimate the KL divergence with the DPP prior
  n_mc_samples: 100

  # Maximum value for the absolute value of the gradient of logit describing the probability of each foreground object.
  # Do not change them unless you understand what you are doing
  grad_logit_max: 10

# parameter related to the optimizer
optimizer:
  # Can be "adam", "SGD" or "RMSprop". In all our experiments we have used Adam.
  type: "adam"

  # Learning rate.
  lr: 0.001

  # Betas parameters for the Adam optimizer
  betas_adam: [0.9, 0.999]

  # Alpha parameter for the RMSprop optimizer
  alpha_rmsprop: 0.99


# parameter relative to the learning rate scheduler
scheduler:
  # Boolean. If True the scheduler is active. If False the learning rate is constant during the simulation
  is_active: True

  # Can be "step_LR" or "multistep_LR"
  type: "multistep_LR"

  # Multiplicative factor (less than 1.0) which reduce the learning rate
  gamma: 0.1

  # The "step_LR" scheduler decays the learning rate by gamma every step_size epochs
  step_size: 500

  # The "multistep_LR" scheduler decays the learning rate by gamma once the number of epoch reaches one of the milestones.
  milestones: [200, 500]
