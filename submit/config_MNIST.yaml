# neptune project for logging the simulation results
neptune_project: "cellarium/genus"

# simulation-level parameters
simulation:
  # can be scratch, resume, pretrained
  type: "scratch"
  BATCH_SIZE: 128
  MAX_EPOCHS: 501
  TEST_FREQUENCY: 5
  CHECKPOINT_FREQUENCY: 50

# architecture parameters
architecture:

  # Ingeters specifying the unet architecture
  # Scale factor need to be power of 2 (i.e. 1,2,4,8,16,...) and describe the downsampling in spatial resolution
  # If the input image is 256x256 and unet_scale_factor_boundigboxes=32
  # then the bounding_boxes are defined on a 8x8 grid
  unet_scale_factor_initial_layer: 1  # at the moment only 1 will work
  unet_scale_factor_background: 16
  unet_scale_factor_boundingboxes: 8
  unet_ch_before_first_maxpool: 16
  unet_ch_feature_map: 16

  # Integers. Latent dimension for z_background and z_where
  zbg_dim: 4  # small value otherwise the background can learn to reconstruct the foreground
  zwhere_dim: 4  # must be a multiple of 4

  # related to encoding-decoding of glimpses
  glimpse_size: 28  # only 28 will work for now
  zinstance_dim: 20

  # Float values in (0,1) for the IntersectionOverMinimum threshold to be used in non-max-suppression.
  # Lower value lead to a more strict NMS.
  # Do not change them unless you understand what you are doing.
  nms_threshold_train : 0.3
  nms_threshold_test : 0.5

# parameters describing the input image
input_image:

  # Integer. Number of channels of the image
  ch_in: 1

  # Integer. Size, in pixels, of the patches to analyze.
  # It can be smaller than the size of the image.
  # This is useful if a large image is processed by random crops
  patch_size: 80

  # Integer. Maximum number of objects in each patch of square size patch_size x patch_size.
  # A too large value will lead to waste computations.
  # Small value will force the model to group distinct objects together.
  max_objects_per_patch: 8

  # Tuple with the range (in pixel) of the size of the objects
  range_object_size: [10, 35]

  # Desired value for pixel-averaged Mean Square Error, i.e. MSE = pixel_mean_of (x-x_reconstructed)**2
  # Small value lead to more accurate reconstruction.
  # If the value is too small, the model will ignore all the priors to try to achieve a low MSE.
  # The goal is to segment the scene into objects not to achieve perfect reconstruction.
  # Therefore use a not-to-small value.
  # For example, if the image intensity is the range (0,1) then use 0.1
  target_mse_max: 0.075

  # Tuple with the desired fraction of pixel to be assigned to the foreground objects.
  # The values are in the (0,1) range. If unsure, use vague values.
  # The values are used to guide the model toward the desired segmentation.
  target_fgfraction_min_max: [0.05, 0.15]

  # The following parameters determine the DPP-prior which in turns determine the expected number of object in the scene.
  # At the current moment these parameters are NOT learnable and need to be chosen differently for each dataset.
  # See our example notebook to see how to choose these parameters.
  # Note that this is just the prior, the inferred number of object in each scene will in general deviate from the prior.
  # In future releases, we will make these parameters learnable.
  DPP_length: 5.0
  DPP_weight: 0.2

# parameter related to the loss function
loss:
  # The loss functions has many terms whose importance is controlled by the 3 values below.
  # We use an automatic method to adjust these parameters but the user can specify the range of acceptable values.
  # Do not change them unless you understand what you are doing
  # The idea is that lambda_nobject and lambda_fgfraction can become as big as necessary to force the parameters
  # to be in the desired range.
  # lambda_mse should not become too large otherwise the KL term is meaningless.
  lambda_mse_min_max: [0.1, 100.0]
  lambda_fgfraction_max: 10000.0
  lambda_nobject_max: 10000.0

  # Hyper-parameters which control additional loss terms.
  # Do not change them unless you understand what you are doing
  mask_overlap_penalty_strength: 0.001
  bounding_box_regression_penalty_strength: 0.001
  bounding_box_regression_padding: 3

  # Integer. Number of monte-carlo samples used to estimate the KL divergence with the DPP prior
  mc_temperatures: [1.0, 2.0, 3.0, 4.0, 5.0]
  n_mc_samples_for_temperature: 20


# parameter related to the optimizer
optimizer:
  # Can be "adam", "SGD" or "RMSprop". In all our experiments we have used Adam.
  type: "adam"

  # Learning rate. Use 1E-4
  lr: 0.001
  lr_geco: 0.001

  # Betas parameters for the Adam optimizer
  betas_adam: [0.9, 0.999]
  betas_geco_adam: [0.9, 0.999]

  # Alpha parameter for the RMSprop optimizer
  alpha_rmsprop: 0.99
  alpha_geco_rmsprop: 0.99


# parameter relative to the learning rate scheduler
scheduler:
  # Boolean. If True the scheduler is active. If False the learning rate is constant during the simulation
  is_active: True

  # Can be "step_LR" or "multistep_LR"
  type: "multistep_LR"

  # Multiplicative factor (less than 1.0) which reduce the learning rate
  gamma: 0.5

  # The "step_LR" scheduler decays the learning rate by gamma every step_size epochs
  step_size: 500

  # The "multistep_LR" scheduler decays the learning rate by gamma once the number of epoch reaches one of the milestones.
  milestones: [200, 500]
