# neptune project for logging the simulation results
neptune_project: "cellarium/genus"

# simulation-level parameters
simulation:
  # can be scratch, resume, pretrained
  type: "scratch"
  BATCH_SIZE: 256
  MAX_EPOCHS: 4501
  TEST_FREQUENCY: 50
  CHECKPOINT_FREQUENCY: 50

# architecture parameters
architecture:

  # Ingeters specifying the unet architecture
  # Scale factor need to be power of 2 (i.e. 1,2,4,8,16,...) and describe the downsampling in spatial resolution
  # If the input image is 256x256 and unet_scale_factor_boundigboxes=32
  # then the bounding_boxes are defined on a 8x8 grid
  unet_scale_factor_initial_layer: 1  # at the moment only 1 will work
  unet_scale_factor_background: 16
  unet_scale_factor_boundingboxes: 8
  unet_ch_before_first_maxpool: 8
  unet_ch_feature_map: 8

  # Integers. Latent dimension for z_background and z_where
  zbg_dim: 10  # small value otherwise the background can learn to reconstruct the foreground
  zwhere_dim: 8  # must be a multiple of 4

  # related to encoding-decoding of glimpses
  glimpse_size: 28  # only 28 will work for now
  zinstance_dim: 40

  # Float values in (0,1) for the IntersectionOverMinimum threshold to be used in non-max-suppression.
  # Lower value lead to a more strict NMS.
  # Do not change them unless you understand what you are doing.
  nms_threshold_train : 0.3 # let it be
  nms_threshold_test : 0.5  # let it be

# parameters describing the input image
input_image:

  # Boolean. Is the background completely zero or not?
  is_zero_background: False

  # Integer. Number of channels of the image
  ch_in: 1

  # Integer. Size, in pixels, of the patches to analyze.
  # It can be smaller than the size of the image.
  # This is useful if a large image is processed by random crops
  patch_size: 80

  # Integer. Maximum number of objects in each patch of square size patch_size x patch_size.
  # A too large value will lead to waste computations.
  # Small value will force the model to group distinct objects together.
  max_objects_per_patch: 10

  # Tuple with the range of the size of the objects (in pixels)
  range_object_size: [10, 35]

  # The MSE is the pixel mean of: ((x-x_reconstructed) / sigma_mse)^2
  # sigma_MSE provide the overall scale it should be chosen so that acceptable reconstructions are of order 1.
  # For example if the input image is in the range (0,1) then sigma_mse should be 0.1
  #
  # Target_mse is the range of acceptable values for MSE. For example [1.0, 3.0]
  #
  # The model will tune its parameters to try to achieve MSE in this range while using as few objects as possible.
  # If the background is too expressive or this value is too high, the model can achieve the target MSE with the background only
  # If the foreground is not expressive enogh or this value is too low, the model will never reach the target
  sigma_mse: 0.075
  target_mse_min_max: [1.0, 3.0]  # let it be
  lambda_mse_min_max: [0.1, 50.0] # let it be

  # Tuple with the desired fraction of pixel to be assigned to the foreground objects.
  # The values are in the (0,1) range. If unsure, use vague values.
  # The values are used to guide the model toward the desired segmentation.
  target_fgfraction_min_max: [0.05, 0.15]  # this depends on the dataset
  lambda_fgfraction_min_max: [0.0, 5.0]    # let it be

  # The following parameters determine the DPP-prior which in turns determine the expected number of object in the scene.
  # See our example notebook to see how to choose these parameters.
  # During training the DPP_weight will be annealed from a large value (corresponding to many objects) to a smaller value
  DPP_learnable_parameters: False
  DPP_length: 5.0
  DPP_weight_initial_final: [10.0, 0.3]


# parameter related to the loss function
loss:
  # The type of observation model
  GMM: False

  # Hyper-parameters which control additional loss terms.
  # Do not change them unless you understand what you are doing
  mask_overlap_penalty_strength: 0.0
  box_overlap_penalty_strength: 0.0
  bounding_box_regression_penalty_strength: 0.001
  bounding_box_regression_padding: 3

  # Integer. Number of monte-carlo samples used to estimate the KL divergence with the DPP prior
  n_mc_samples: 10


# parameter related to the optimizer
optimizer:
  # Can be "adam", "SGD" or "RMSprop". In all our experiments we have used Adam.
  type: "adam"

  # Learning rate. Use 5E-4
  lr: 0.001
  lr_geco: 0.001
  lr_geco_nobj: 0.001

  # Betas parameters for the Adam optimizer
  betas_adam: [0.9, 0.999]
  betas_geco_adam: [0.9, 0.999]
  betas_geco_nobj_adam: [0.9, 0.999]

  # Alpha parameter for the RMSprop optimizer
  alpha_rmsprop: 0.99
  alpha_geco_rmsprop: 0.99
  alpha_geco_nobj_rmsprop: 0.99


# parameter relative to the learning rate scheduler
scheduler:
  # Boolean. If True the scheduler is active. If False the learning rate is constant during the simulation
  is_active: True

  # Can be "step_LR" or "multistep_LR"
  type: "multistep_LR"

  # Multiplicative factor (less than 1.0) which reduce the learning rate
  gamma: 0.5

  # The "step_LR" scheduler decays the learning rate by gamma every step_size epochs
  step_size: 500

  # The "multistep_LR" scheduler decays the learning rate by gamma once the number of epoch reaches one of the milestones.
  milestones: [100, 300]
